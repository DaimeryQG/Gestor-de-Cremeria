package com.back.back.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.back.back.model.Registro;
import com.back.back.service.RegistroService;
import com.back.back.service.RegistroService.ResourceNotFoundException;

@RestController
@RequestMapping("/registros")
public class RegistroController {

    @Autowired
    private RegistroService registroService;

    // Endpoint para obtener todos los registros
    @GetMapping
    public List<Registro> obtenerTodos() {
        return registroService.obtenerTodos();
    }

    // Endpoint para obtener un registro por ID
    @GetMapping("/{id}")
    public ResponseEntity<Registro> obtenerPorId(@PathVariable Long id) {
        try {
            Registro registro = registroService.obtenerPorId(id);
            return new ResponseEntity<>(registro, HttpStatus.OK);
        } catch (ResourceNotFoundException e) {
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        }
    }

    // Endpoint para registrar un nuevo registro
    @PostMapping("/registrar")
    public ResponseEntity<Registro> registrar(@RequestBody Registro registro) {
        Registro nuevoRegistro = registroService.registrar(registro);
        return new ResponseEntity<>(nuevoRegistro, HttpStatus.CREATED);
    }

    // Endpoint para actualizar un registro por ID
    @PutMapping("/{id}")
    public ResponseEntity<Registro> actualizar(@PathVariable Long id, @RequestBody Registro registro) {
        try {
            Registro registroActualizado = registroService.actualizar(id, registro);
            return new ResponseEntity<>(registroActualizado, HttpStatus.OK);
        } catch (ResourceNotFoundException e) {
            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);
        }
    }

    // Endpoint para eliminar un registro por ID
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> eliminar(@PathVariable Long id) {
        try {
            registroService.eliminar(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (ResourceNotFoundException e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
}

